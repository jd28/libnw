name: ci

on:
  push:
    paths-ignore:
      - "**.md"
      - "**.rst"
  pull_request:
    paths-ignore:
      - "**.md"
      - "**.rst"
  release:
    types:
      - published

env:
  buildDir: "${{ github.workspace }}/build/"
  vcpkg-tag: "2022.09.27"
  VCPKG_ROOT: "${{ github.workspace }}/vcpkg/"
  VCPKG_DEFAULT_BINARY_CACHE: "${{ github.workspace }}/vcpkg/.cache"
  NWN_ROOT: "${{ github.workspace }}/nwn/"
  VCPKG_CACHE_NAME: "vcpkg-cache"
  CI_GITHUB_ACTIONS: "1"
  MACOSX_DEPLOYMENT_TARGET: "10.15"

jobs:
  build_wheels:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-11, ubuntu-20.04, windows-2019]

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      # Install latest CMake.
      - uses: lukka/get-cmake@latest

      # macOS Dependencies
      - name: macOS - install non-vcpkg dependencies
        if: matrix.os == 'macos-11'
        env:
          HOMEBREW_NO_ANALYTICS: "ON"
          HOMEBREW_NO_AUTO_UPDATE: "ON"
          HOMEBREW_NO_BOTTLE_SOURCE_FALLBACK: "ON"
          HOMEBREW_NO_INSTALL_CLEANUP: "ON"
        run: |
          brew install pkg-config automake ninja libtool zlib llvm
          echo "CC=$(brew --prefix llvm)/bin/clang" >> $GITHUB_ENV
          echo "CXX=$(brew --prefix llvm)/bin/clang++" >> $GITHUB_ENV

      - name: macOS - check clang version
        if: matrix.os == 'macos-11'
        run: $CC --version

      # Linux dependencies
      - name: linux - install gcc
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt install gcc-11 g++-11 lcov doxygen
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 110 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11

      # vcpkg
      - name: all - download vcpkg
        run: |
          git clone https://github.com/microsoft/vcpkg ${{ github.workspace }}/vcpkg || true
          pushd vcpkg
          git checkout --force ${{ env.vcpkg-tag }}
          popd

      - name: all - cache vcpkg
        id: cache-vcpkg
        uses: actions/cache@v2
        with:
          path: |
            ${{ github.workspace }}/vcpkg/.cache
          key: ${{ runner.os }}-build-${{ env.VCPKG_CACHE_NAME }}-${{ env.vcpkg-tag }}-${{ hashFiles('vcpkg.json') }}

      - name: all - make cache dir
        if: steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: mkdir "${{ github.workspace }}/vcpkg/.cache"

      - name: macOS|linux - bootstrap vcpkg
        if: matrix.os != 'windows-2019'  && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: vcpkg/bootstrap-vcpkg.sh

      - name: windows - bootstrap vcpkg
        if: matrix.os == 'windows-2019' && steps.cache-vcpkg.outputs.cache-hit != 'true'
        run: vcpkg/bootstrap-vcpkg.bat

      # nwn
      - name: all - cache nwn
        id: cache-nwn
        uses: actions/cache@v2
        env:
          cache-name: cache-nwn
        with:
          path: |
            ${{ github.workspace }}/nwn/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-3e02cddcea5d0ae82111a3038f14aef6c14d05d9

      - name: all - download nwn
        if: steps.cache-nwn.outputs.cache-hit != 'true'
        run: |
          curl https://nwn.beamdog.net/downloads/nwnee-dedicated-8193.34.zip -O
          unzip nwnee-dedicated-8193.34.zip -d ${{ github.workspace }}/nwn/
          ls -l ${{ github.workspace }}/nwn/

      # build the normal libraries
      - name: macOS - configure
        if: matrix.os == 'macos-11'
        run: |
          cmake --preset macos

      - name: linux - configure
        if: matrix.os == 'ubuntu-20.04'
        run: |
          cmake --preset linux

      - name: windows - Visual Studio shell
        if: matrix.os == 'windows-2019'
        uses: egor-tensin/vs-shell@v2
        with:
          arch: x64

      - name: windows - configure
        if: matrix.os == 'windows-2019'
        run: |
          cmake --preset ci-windows

      - name: all - build & test
        run: |
          cmake --build --preset default
          ctest --preset default

      # Don't want the cmake files when building the wheels
      - name: linux|macOS - remove build directory
        if: matrix.os != 'windows-2019'
        run: |
          rm ${{ env. buildDir }}/CMakeCache.txt
          rm -rf ${{ env. buildDir }}/CMakeFiles

      - name: windows - remove build directory
        if: matrix.os == 'windows-2019'
        run: |
          del /f /a ${{ env.buildDir }}\CMakeCache.txt
          rmdir /s /q ${{ env.buildDir }}\CMakeFiles

      # build the wheels
      - name: all - build wheels
        uses: pypa/cibuildwheel@v2.3.1

      - uses: actions/upload-artifact@v2
        if: failure()
        with:
          name: vcpkg-logs
          path: ${{env.VCPKG_ROOT}}/buildtrees/**/*.log

      - uses: actions/upload-artifact@v2
        with:
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build sdist
        run: pipx run build --sdist

      - uses: actions/upload-artifact@v2
        with:
          path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-20.04
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist

      - uses: pypa/gh-action-pypi-publish@v1.4.2
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}
          # repository_url: https://test.pypi.org/legacy/
